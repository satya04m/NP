[25/11, 12:21 pm] Satya: from sklearn.decomposition import PCA
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt
import seaborn as sns
iris = load_iris()
X = iris.data
y = iris.target
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)
sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1], hue=y)
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.title("PCA on Iris Dataset")
plt.show()
[25/11, 12:22 pm] Satya: import matplotlib.pyplot as plt
import pandas as pd

# Example Data
data = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 4, 5, 4, 5]})
plt.scatter(data['x'], data['y'])
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Scatterplot of X vs Y")
plt.show()
corr = data['x'].corr(data['y'])
print("Correlation Coefficient:", corr)
from sklearn.linear_model import LinearRegression
import numpy as np

X = np.array(data['x']).reshape(-1, 1)
y = np.array(data['y'])

model = LinearRegression()
model.fit(X, y)
print("Intercept:", model.intercept_)
print("Slope:", model.coef_)
[25/11, 12:22 pm] Satya: def is_palindrome(s):
    if len(s) <= 1:
        return True
    if s[0] != s[-1]:
        return False
    return is_palindrome(s[1:-1])

# Example
string = "radar"
print(f"{string} is a Palindrome: {is_palindrome(string)}")
[25/11, 12:22 pm] Satya: # Input three numbers
a, b, c = 10, 20, 15

# Compare numbers
if a > b and a > c:
    print(f"{a} is the greatest.")
elif b > a and b > c:
    print(f"{b} is the greatest.")
else:
    print(f"{c} is the greatest.")
